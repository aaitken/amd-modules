// Generated by CoffeeScript 1.3.1
(function() {

  define(function() {
    var Interface;
    Interface = (function() {

      Interface.ensureImplements = function(object) {
        var argument, i, method, _i, _len, _results;
        if (arguments.length < 2) {
          throw new Error('Function Interface.ensureImplements called with ' + arguments.length + ' arguments, but expected at least 2');
        }
        _results = [];
        for (i = _i = 0, _len = arguments.length; _i < _len; i = ++_i) {
          argument = arguments[i];
          if (i > 0) {
            if (argument.constructor !== Interface) {
              throw new Error('Function Interface.ensureImplements expects arguments two and above to be instances of Interface');
            }
            _results.push((function() {
              var _j, _len1, _ref, _results1;
              _ref = argument.methods;
              _results1 = [];
              for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
                method = _ref[_j];
                if (!object[method] || typeof object[method] !== 'function') {
                  throw new Error('Function Interface.ensureImplements: object does not implement the ' + argument.name + ' interface. ' + 'Method ' + method + ' was not found.');
                } else {
                  _results1.push(void 0);
                }
              }
              return _results1;
            })());
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };

      function Interface(name, methods) {
        var method, _i, _len;
        this.name = name;
        if (arguments.length !== 2) {
          throw new Error('Interface constructor called with ' + arguments.length + ' arguments, but expected exactly 2');
        }
        this.methods = [];
        for (_i = 0, _len = methods.length; _i < _len; _i++) {
          method = methods[_i];
          if (typeof method !== 'string') {
            throw new Error('Interface constructor expects method names to be passed as strings');
          }
          this.methods.push(method);
        }
      }

      return Interface;

    })();
    return Interface;
  });

}).call(this);
